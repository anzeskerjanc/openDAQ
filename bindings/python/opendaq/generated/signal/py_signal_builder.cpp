//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2023 Blueberry d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"

PyDaqIntf<daq::ISignalBuilder, daq::IBaseObject> declareISignalBuilder(pybind11::module_ m)
{
    return wrapInterface<daq::ISignalBuilder, daq::IBaseObject>(m, "ISignalBuilder");
}

void defineISignalBuilder(pybind11::module_ m, PyDaqIntf<daq::ISignalBuilder, daq::IBaseObject> cls)
{
    cls.doc() = "";

    m.def("SignalBuilder", &daq::SignalBuilder_Create);
    m.def("SignalBuilderEmpty", &daq::SignalBuilderEmpty_Create);

    cls.def("build",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.build().detach();
        },
        "");
    cls.def_property("context",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getContext().detach();
        },
        [](daq::ISignalBuilder *object, daq::IContext* context)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setContext(context);
        },
        py::return_value_policy::take_ownership,
        "Gets the context object. / Sets the context object.");
    cls.def_property("local_id",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getLocalId().toStdString();
        },
        [](daq::ISignalBuilder *object, const std::string& localId)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setLocalId(localId);
        },
        "Gets the local ID of the signal. / Sets the local ID of the signal.");
    cls.def_property("parent",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getParent().detach();
        },
        [](daq::ISignalBuilder *object, daq::IComponent* parent)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setParent(parent);
        },
        py::return_value_policy::take_ownership,
        "Gets the parent of the signal. / Sets the parent of the signal.");
    cls.def_property("descriptor",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getDescriptor().detach();
        },
        [](daq::ISignalBuilder *object, daq::IDataDescriptor* descriptor)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setDescriptor(descriptor);
        },
        py::return_value_policy::take_ownership,
        "Gets the signal's data descriptor. / Sets the data descriptor.");
    cls.def_property("domain_signal",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getDomainSignal().detach();
        },
        [](daq::ISignalBuilder *object, daq::ISignal* signal)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setDomainSignal(signal);
        },
        py::return_value_policy::take_ownership,
        "Gets the signal that carries its domain data. / Sets the domain signal reference.");
    cls.def_property("name",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getName().toStdString();
        },
        [](daq::ISignalBuilder *object, const std::string& name)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setName(name);
        },
        "Gets the name of the signal. / Sets the name of the signal.");
    cls.def_property("description",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getDescription().toStdString();
        },
        [](daq::ISignalBuilder *object, const std::string& description)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setDescription(description);
        },
        "Gets the description of the signal. / Sets the description of the signal.");
    cls.def_property("tags",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getTags().detach();
        },
        [](daq::ISignalBuilder *object, daq::ITagsConfig* tags)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setTags(tags);
        },
        py::return_value_policy::take_ownership,
        "Gets the tags of the signal. / Sets the tags of the signal.");
    cls.def_property("visible",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getVisible();
        },
        [](daq::ISignalBuilder *object, const bool visible)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setVisible(visible);
        },
        "");
    cls.def_property("active",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getActive();
        },
        [](daq::ISignalBuilder *object, const bool active)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setActive(active);
        },
        "Returns true if the signal is active; false otherwise. / Sets the signal to be either active or inactive.");
    cls.def_property("public",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getPublic();
        },
        [](daq::ISignalBuilder *object, const bool isPublic)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setPublic(isPublic);
        },
        "Returns true if the signal is public; false otherwise. / Sets the signal to be either public or private.");
    cls.def_property("component_standard_props_mode",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getComponentStandardPropsMode();
        },
        [](daq::ISignalBuilder *object, daq::ComponentStandardProps standardProps)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setComponentStandardPropsMode(standardProps);
        },
        "");
    cls.def_property("related_signals",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getRelatedSignals().detach();
        },
        [](daq::ISignalBuilder *object, daq::IList* signals)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setRelatedSignals(signals);
        },
        py::return_value_policy::take_ownership,
        "Gets a list of related signals. / Sets the list of related signals.");
    cls.def_property("class_name",
        [](daq::ISignalBuilder *object)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            return objectPtr.getClassName().toStdString();
        },
        [](daq::ISignalBuilder *object, const std::string& className)
        {
            const auto objectPtr = daq::SignalBuilderPtr::Borrow(object);
            objectPtr.setClassName(className);
        },
        "");
}
